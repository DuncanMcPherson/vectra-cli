name: Verify changes

on:
  pull_request: 
    branches:
      - master

jobs:
  hash:
    runs-on: ubuntu-latest
    name: Generate NuGet cache Hash
    outputs: 
      hash: ${{steps.set-hash.outputs.hash}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Hash
        id: set-hash
        shell: pwsh
        run: |
          $projectFiles = @(Get-ChildItem -Recurse -Filter *.csproj)
          $packageReferences = @()
          
          echo "Found $($projectFiles.Count) project files."
          if ($projectFiles.Count -eq 0) {
            echo "No project files found. Exiting..."
            exit 1
          }
          
          foreach ($file in $projectFiles) {
            [xml]$xml = Get-Content $file.FullName
            $refs = @($xml.Project.ItemGroup.PackageReference)
            echo "Found $($refs.Count) package references in $($file.FullName)."
            if ($refs.Count -eq 0) {
              echo "No Package references found in $($file.FullName). Skipping file..."
              continue
            }
            foreach ($ref in $refs) {
              echo "Processing package reference: $($ref.Include) version $($ref.Version)."
              if ([string]::IsNullOrWhiteSpace($ref.Include)) {
                echo "No value provided for include. Skipping..."
                continue
              }
              $line = "$($ref.Include):$($ref.Version)"
              $packageReferences += $line
            }
          }
          
          echo "Found $($packageReferences.Count) package references."
          if ($packageReferences.Count -eq 0) {
            echo "No references found. Exiting..."
            exit 0
          }
          
          $packageReferences = $packageReferences | Sort-Object
          $joined = [string]::Join("`n", $packageReferences)
          $hash = [System.BitConverter]::ToString(
          (New-Object -TypeName System.Security.Cryptography.SHA256Managed).ComputeHash(
                [System.Text.Encoding]::UTF8.GetBytes($joined)
            )
          ) -replace "-", ""

          echo "hash=$hash" >> $env:GITHUB_OUTPUT
  build:
    name: Ensure builds
    runs-on: ubuntu-latest
    needs: hash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache NuGet
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{runner.os}}-nuget-${{needs.hash.outputs.hash}}
          restore-keys: |
            ${{runner.os}}-nuget-
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.x
      - name: Add Private NuGet source
        env:
          GITHUB_TOKEN: ${{secrets.PACKAGES}}
        run: |
          dotnet nuget add source https://nuget.pkg.github.com/DuncanMcPherson/index.json \
            --name "github" \
            --username "${{ github.repository_owner }}" \
            --password "${{ secrets.PACKAGES }}" \
            --store-password-in-clear-text
      - name: Restore and build
        run: |
          dotnet restore
          dotnet build -c Release --no-restore
  test:
    name: Run Unit tests
    runs-on: ubuntu-latest
    needs: hash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.x
      - name: Cache NuGet
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ needs.hash.outputs.hash }}
      - name: Add Private NuGet source
        env:
          GITHUB_TOKEN: ${{secrets.PACKAGES}}
        run: |
          dotnet nuget add source https://nuget.pkg.github.com/DuncanMcPherson/index.json \
            --name "github" \
            --username "${{ github.repository_owner }}" \
            --password "${{ secrets.PACKAGES }}" \
            --store-password-in-clear-text
      - name: Restore and Test
        run: |
          dotnet restore
          dotnet test -c Release --logger "trx;LogFileName=TestResults.trx" --collect:"XPlat Code Coverage"
        continue-on-error: true
      - name: Report Generator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.7
        with:
          reports: '**/TestResults/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlSummary;MarkdownSummary'
      - name: Fail if coverage below threshold
        env:
          THRESHOLD: 80.0
        run: |
          set -euxo pipefail
          
          SUMMARY_FILE=$(find coveragereport -maxdepth 1 -type f -iname "*.md" | head -n1)
                    if [ -z "$SUMMARY_FILE" ]; then
                    echo "Could not locate coverage file"
                    exit 1
                    fi

                    echo "Using summary file: $SUMMARY_FILE"

                    LINE_COV_ROW=$(grep -E "^\|\s*\*\*Line coverage:\*\*" "$SUMMARY_FILE" || true)
                    if [ -z "$LINE_COV_ROW" ]; then
                    echo "❌ Could not find the '**Line coverage:**' row in $SUMMARY_FILE"
                    exit 1
                    fi
                    echo "Found line coverage row: $LINE_COV_ROW"
                    TOTAL_COVERAGE=$(echo "$LINE_COV_ROW" \
                    | sed -E 's/.*\|\s*([0-9]+(\.[0-9]+)?)%.*/\1/')

                    echo "ℹ️ Total line coverage = $TOTAL_COVERAGE% (threshold = $THRESHOLD%)"

                    awk -v cov="$TOTAL_COVERAGE" -v thr="$THRESHOLD" 'BEGIN {
                          if (cov + 0 < thr + 0) {
                            print "❌ Coverage below threshold"
                            exit 1
                          } else {
                            print "✅ Coverage meets threshold"
                            exit 0
                          }
                        }'
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: TestResults
          path: '**/TestResults/**/*.trx'
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: CoverageReport
          path: |
            coveragereport
            '**/TestResults/**/*.xml'